@inject NavigationManager navigationManager
@inject IDbContextFactory<CodigoAzulContext> DbFactory
@inject IMessageService message

@page "/Pacientes"

<div style="margin-top: 2em;">
    <Table DataSource="PacientesVMList" Bordered
        @bind-SelectedRows="selectedRows"
        Total="_total"
        @bind-PageIndex="_pageIndex"
        @bind-PageSize="_pageSize"
        Responsive>

        <TitleTemplate>
            <GridRow>
                <GridCol Style="width: 100% !important;flex: none !important;display: flex; justify-content: space-between; max-width:none;" Span="4">
                    <Title Level="3">Pacientes</Title>
                </GridCol>
            </GridRow>
        </TitleTemplate>
        <ColumnDefinitions>
            <PropertyColumn Property="p => p.Documento"
                            DefaultSortOrder="@SortDirection.Descending"
                            SorterCompare="@((a, b) => string.Compare(a, b))"/>
            <PropertyColumn Property="p=>p.Nombre" Sortable/>
            <PropertyColumn Property="p=>p.Apellido" Sortable />
			<PropertyColumn Property="p=>p.Telefono" />
            <PropertyColumn Property="p=>p.Direccion"  />
            <PropertyColumn Property="p=>p.GrupoSanguineo" Sortable />
			<PropertyColumn Property="p=>p.FechaIngreso" />
			<PropertyColumn Property="p=>p.FechaAlta" />
			<PropertyColumn Property="p=>p.Alergias " />
			@* <PropertyColumn Property="p=>p.Enfermedades" />
			<PropertyColumn Property="p=>p.Medicamentos" /> *@
            <ActionColumn Title="Acciones">
                <Space>
                    <SpaceItem>
                        <Popconfirm Style="width: 33.3%;" Title="¿Deseas eliminar este paciente?"
                                    OnConfirm="()=>Delete(context.Documento)"
                                    OnCancel="Cancel">
                            <Button Danger>
                                Eliminar
                            </Button>
                        </Popconfirm>
                    </SpaceItem>
@*                    <SpaceItem>
                        <Popconfirm Style="width: 33.3%;" Title="¿Estas seguro que deseas desasignar el bombero?"
                                    OnConfirm="()=>Desasignar(context.NroEquipo)"
                                    OnCancel="Cancel">
                            <Button Danger>
                                Desasignar
                            </Button>
                        </Popconfirm>
                    </SpaceItem>*@
                    <SpaceItem>
						<Button Type="primary" OnClick="()=>ShowModalEditar(context.Documento)">Editar</Button>
					</SpaceItem>
                </Space>
            </ActionColumn>
        </ColumnDefinitions>
    </Table>
    <div style="display: flex;justify-content: flex-end;margin-top: -3.5em;">
        <Button OnClick="()=>ShowModalAgregar()">Cargar paciente</Button>
    </div>
</div>

<Modal Footer="null" Title="@("Paciente")"
       Visible="@_visibleAgregar"
       OnOk="@HandleOkAgregar"
       OnCancel="@HandleCancelAgregar">
       <AgregarPaciente/>
       <Button Style="margin-right: 134px !important;" Type="@ButtonType.Primary" OnClick="@HandleCancelAgregar">
            Volver
       </Button>
</Modal>

<Modal Title="@("Paciente")"
       Visible="@_visible"
       OnOk="@HandleOk"
       OnCancel="@HandleCancel">
    <Form Loading="loading" Model="@PacienteVM"
          LabelColSpan="8"
          WrapperColSpan="16"
          OnFinish="OnFinish"
          OnFinishFailed="OnFinishFailed"
          @ref="@_form">

        <FormItem Label="Documento">
            <Input DefaultValue="@PacienteVM.Documento" @bind-Value="@PacienteVM.Documento" />
        </FormItem>
        <FormItem Label="Modelo">
			<Input DefaultValue="@PacienteVM.Nombre" @bind-Value="@PacienteVM.Nombre" />
        </FormItem>
        <FormItem Label="Nro Equipo">
			<Input DefaultValue="@PacienteVM.Apellido" @bind-Value="@PacienteVM.Apellido" />
        </FormItem>
        <FormItem Label="Nro Serie">
			<Input DefaultValue="@PacienteVM.Direccion" @bind-Value="@PacienteVM.Direccion" />
        </FormItem>
        <FormItem Label="Estado">
			<EnumSelect DefaultValue="@PacienteVM.Telefono" @bind-Value="@PacienteVM.Telefono" />
        </FormItem>

    </Form>
</Modal>

@code {

	string searchString;
	IEnumerable<PacienteViewModel> selectedRows;
	List<Paciente>? pacientes { get; set; } = new();
	private PacienteViewModel PacienteVM { get; set; } = new();

	List<PacienteViewModel> PacientesVMList { get; set; } = new();

	CodigoAzulContext Context { get; set; }

	int _pageIndex = 1;
	int _pageSize = 6;
	int _total = 0;

	protected override async Task OnInitializedAsync()
	{
		await Init();
	}

	private async Task Init()
	{
		PacienteVM = new();
		Context = DbFactory.CreateDbContext();
		await CargarPacienteVM();
	}

	public async Task CargarPacienteVM()
	{
		PacientesVMList.Clear();
		var pacienteDB = await Context.Pacientes.Include(p=>p.Alergias).Include(p=>p.Enfermedades)
		.Include(m=>m.Medicamentos).Include(a=>a.AreaPaciente).ToListAsync();

		foreach (Paciente p in pacienteDB)
		{
			PacienteViewModel pacienteViewModel = new()
				{
					Nombre = p.Nombre,
					Apellido = p.Apellido,
					Direccion = p.Direccion,
					Documento = p.Documento,
					Telefono = p.Telefono,
					GrupoSanguineo = p.GrupoSanguineo,
					FechaIngreso = p.FechaIngreso,
					FechaAlta = p.FechaAlta,
					Alergias = p.Alergias,
					Enfermedades = p.Enfermedades,
					Medicamentos = p.Medicamentos,
					AreaAsignada = p.AreaPaciente 
				};
			PacientesVMList.Add(pacienteViewModel);
		}
		
	}

	void OnRowClick(RowData<PacienteViewModel> row)
	{
		Console.WriteLine($"row {row.Data.Documento} was clicked");
	}//Toma el valor del valor de la fila seleccionada

	private async Task OnChange(QueryModel<PacienteViewModel>
		queryModel)
	{
		Console.WriteLine(JsonSerializer.Serialize(queryModel));
		//dataSource = queryModel.ExecuteQuery(bomberos.AsQueryable())
		//    .Where(x => string.IsNullOrWhiteSpace(searchString) || x.Nombre.Contains(searchString, StringComparison.OrdinalIgnoreCase));
		//arreglar busqueda-----------------------------------------------------------------------------------------------------------------------------------------
		await Init();
	}

	public void RemoveSelection(string DocumentoBorrar)
	{
		var selected = selectedRows.Where(x => x.Documento != DocumentoBorrar);
		selectedRows = selected;
	}

	private async Task Delete(string DocumentoBorrar)
	{
		try
		{
			Paciente? pacientes = await Context.Pacientes.FirstOrDefaultAsync(c => c.Documento == DocumentoBorrar);
			Context.Remove(pacientes);
			PacientesVMList = PacientesVMList.Where(x => x.Documento != DocumentoBorrar).ToList();
			_total = PacientesVMList.Count;
			await Context.SaveChangesAsync();
			await Init();
			StateHasChanged();
			await message.Success("Paciente eliminado correctamente");
		}
		catch (Exception ex)
		{
			await Init();
			StateHasChanged();
			if (ex.InnerException != null)
				await message.Error(ex.InnerException.Message, 5);
			else
				await message.Error(ex.Message, 5);
		}

	}

	private async void EditarPaciente(string DocumentoBorrar)
	{
		try
		{
			Paciente? paciente = await Context.Pacientes.SingleOrDefaultAsync(p => p.Documento == DocumentoBorrar);

			paciente.Nombre = PacienteVM.Nombre;
			paciente.Apellido = PacienteVM.Apellido;
			paciente.Direccion = PacienteVM.Direccion;
			paciente.Documento = PacienteVM.Documento;
			paciente.Telefono = PacienteVM.Telefono;
			paciente.GrupoSanguineo = PacienteVM.GrupoSanguineo;
			paciente.FechaIngreso = PacienteVM.FechaIngreso;
			paciente.FechaAlta = PacienteVM.FechaAlta;
			paciente.Alergias = new();
			paciente.Enfermedades = new();
			paciente.Medicamentos = new();
			await Context.SaveChangesAsync();
			await Init();
			StateHasChanged();
			await message.Success($"Datos de {paciente.Apellido} {paciente.Nombre} editado correctamente");
		}
		catch (Exception ex)
		{
			await Init();
			StateHasChanged();
			if (ex.InnerException != null)
				await message.Error(ex.InnerException.Message, 5);
			else
				await message.Error(ex.Message, 5);
		}

	}

	string NroEquipoEdit;
	private void ShowModalEditar(string NroEquipo)
	{
		NroEquipoEdit = NroEquipo;
		GetComunicacionViewModel(NroEquipo);
		_visible = true;
	}
	private void OnFinishFailed(EditContext editContext)
	{
		Console.WriteLine($"Failed:{JsonSerializer.Serialize(PacienteVM)}");
	}

	bool loading = false;

	void toggle(bool value) => loading = value;

	bool _visible = false;
	bool _visibleAgregar = false;


	private void ShowModalAgregar()
	{
		_visibleAgregar = true;
	}
	private void HandleCancel(MouseEventArgs e)
	{
		Console.WriteLine("e");
		_visible = false;
	}


	private async void HandleOkAgregar(MouseEventArgs e)
	{
		_visibleAgregar = false;
	}
	public void HandleCancelAgregar(MouseEventArgs e)
	{
		Console.WriteLine(e);
		_visibleAgregar = false;
	}

	private Form<PacienteViewModel>
		_form;
	/// <param name="args"></param>
	private void OnFinish(EditContext editContext)
	{
		Console.WriteLine("e");
		_visible = false;
	}

	private async void HandleOk(MouseEventArgs e)
	{
		EditarPaciente(NroEquipoEdit);
		_visible = false;
	}

	private void NevigateToYourUrl()
	{
		navigationManager.NavigateTo($"/Comunicacion", true);
	}

	private async void GetComunicacionViewModel(string Documento)
	{
		PacienteVM = PacientesVMList.Single(p => p.Documento == Documento);
		StateHasChanged();
	}//Se obtienen los valores de la base de datos al view model

	private void Cancel()
	{
		message.Error("Operacion cancelada");
	}
}
