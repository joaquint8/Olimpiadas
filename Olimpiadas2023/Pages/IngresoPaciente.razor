@using Olimpiadas2023.Enum
@implements IDisposable
@inject IMessageService message
@inject IDbContextFactory<CodigoAzulContext> DbFactory
@page "/IngresoPaciente"
<h3>IngresoPaciente</h3>
<div style="display:flex;flex-direction:column;align-items:center;width:100%;">
    <Form Model="@ingresoPacienteVM"
          OnFinish="OnFinish"
          OnFinishFailed="OnFinishFailed"
          LabelColSpan="8"
          WrapperColSpan="16">
        <FormItem Label="Descripcion ">
            <Input @bind-Value="@ingresoPacienteVM.Descripcion" />
        </FormItem>
        <FormItem Label="Tip de Importancia">
            <EnumSelect TEnum="TipoImportancia" @bind-Value="@ingresoPacienteVM.Importancia" />
        </FormItem>
        <FormItem Label="Asignar paciente">
            <Select TItem="PacienteViewModel"
                    TItemValue="int"
                    DataSource="@PacientesViewModels"
                    @bind-Value="@ingresoPacienteVM.PacienteId"
                    LabelName="@nameof(PacienteViewModel.NombreYApellido)"
                    ValueName="@nameof(PacienteViewModel.PersonaId)"
                    Placeholder="Selecione el paciente"
                    DefaultActiveFirstOption="false"
                    AllowClear="true"
                    EnableSearch>
            </Select>
        </FormItem>
        <FormItem Label="Asignar habitacion">
            <Select TItem="HabitacionVm"
                    TItemValue="int"
                    DataSource="@HabitacionViewModels"
                    @bind-Value="@ingresoPacienteVM.HabitacionId"
                    LabelName="@nameof(HabitacionVm.NombreHabitacion)"
                    ValueName="@nameof(HabitacionVm.HabitacionId)"
                    Placeholder="Asignar habitacion"
                    DefaultActiveFirstOption="false"
                    AllowClear="true"
                    EnableSearch>
            </Select>
        </FormItem>

        <FormItem WrapperColOffset="8" WrapperColSpan="16">
            <Button Type="@ButtonType.Primary" HtmlType="submit">
                Cargar Area
            </Button>
        </FormItem>
    </Form>
</div>

@code {
    CodigoAzulContext Context;
    public class IngresoPacienteViewModel
    {
        public string Descripcion { get; set; }
        public TipoImportancia Importancia { get; set; }
        public int HabitacionId { get; set; }
        public int PacienteId { get; set; }
    }
    public class PacienteViewModel
    {
        public int PersonaId { get; set; }
        public string NombreYApellido { get; set; }

    }
    public class HabitacionVm
    {
        public int HabitacionId { get; set; }
        public string NombreHabitacion { get; set; }
    }

    public IngresoPacienteViewModel ingresoPacienteVM = new();
    List<PacienteViewModel> PacientesViewModels = new();
    List<HabitacionVm> HabitacionViewModels = new();

    protected override async Task OnInitializedAsync()
    {
        await Init();
    }

    private async Task Init()
    {
        ingresoPacienteVM = new();
        Context = DbFactory.CreateDbContext();
        await CargarPersonas();
    }
    private async Task CargarPersonas()
    {
        PacientesViewModels = new();
        HabitacionViewModels = new();
        var Pacientes = await Context.Pacientes.ToListAsync();
        var Habitaciones = await Context.Habitaciones.ToListAsync();
        foreach (var p in Pacientes)
        {
            PacienteViewModel pas = new()
                {
                    PersonaId = p.PersonaId,
                    NombreYApellido = p.Nombre + " " + p.Apellido
                };
            PacientesViewModels.Add(pas);
        }
        foreach (var p in Habitaciones)
        {
            HabitacionVm habi = new()
                {
                    HabitacionId = p.HabitacionId,
                    NombreHabitacion = p.NombreHabitacion
                };
            HabitacionViewModels.Add(habi);
        }

    }
    private async void OnFinish(EditContext editContext)
    {
        try
        {
            var PacienteIN = await Context.Pacientes.SingleOrDefaultAsync(p => p.PersonaId == ingresoPacienteVM.PacienteId);
            var habitacionIN = await Context.Habitaciones.SingleOrDefaultAsync(h => h.HabitacionId == ingresoPacienteVM.HabitacionId);
            Olimpiadas2023.Models.Componentes.IngresoPaciente InPaciente = new()
            {
                    Descripcion = ingresoPacienteVM.Descripcion,
                    Importancia = ingresoPacienteVM.Importancia,
                    Paciente = PacienteIN,
                    Habitacion = habitacionIN
            };
            Context.Set<Olimpiadas2023.Models.Componentes.IngresoPaciente>().Add(InPaciente);
            await Context.SaveChangesAsync();

            await Init();
            StateHasChanged();
            await message.Success("Ingreso del paciente correcto");
        }
        catch (Exception e)
        {
            await Init();
            StateHasChanged();
            if (e.InnerException != null)
                await message.Error(e.InnerException.Message, 5);
            else
                await message.Error(e.Message, 5);

        }
    }
    private void OnFinishFailed(EditContext editContext)
    {
        //Console.WriteLine($"Failed:{JsonSerializer.Serialize()}");
    }

    public void Dispose()
    {
        Context?.Dispose();
    }
}
