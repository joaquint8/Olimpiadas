// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Olimpiadas2023.Models;

#nullable disable

namespace Olimpiadas2023.Migrations
{
    [DbContext(typeof(CodigoAzulContext))]
    partial class CodigoAzulContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Olimpiadas2023.Models.Componentes.Alergia", b =>
                {
                    b.Property<int>("AlergiaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AlergiaId"));

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PacientePersonaId")
                        .HasColumnType("int");

                    b.HasKey("AlergiaId");

                    b.HasIndex("PacientePersonaId");

                    b.ToTable("Alergia");
                });

            modelBuilder.Entity("Olimpiadas2023.Models.Componentes.Enfermedad", b =>
                {
                    b.Property<int>("EnfermedadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EnfermedadId"));

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PacientePersonaId")
                        .HasColumnType("int");

                    b.HasKey("EnfermedadId");

                    b.HasIndex("PacientePersonaId");

                    b.ToTable("Enfermedad");
                });

            modelBuilder.Entity("Olimpiadas2023.Models.Componentes.Medicamento", b =>
                {
                    b.Property<int>("MedicamentoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicamentoId"));

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PacientePersonaId")
                        .HasColumnType("int");

                    b.HasKey("MedicamentoId");

                    b.HasIndex("PacientePersonaId");

                    b.ToTable("Medicamento");
                });

            modelBuilder.Entity("Olimpiadas2023.Models.Componentes.ResultadoExamen", b =>
                {
                    b.Property<int>("ResultadoExamenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResultadoExamenId"));

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HistorialMedicoId")
                        .HasColumnType("int");

                    b.HasKey("ResultadoExamenId");

                    b.HasIndex("HistorialMedicoId");

                    b.ToTable("ResultadoExamen");
                });

            modelBuilder.Entity("Olimpiadas2023.Models.Componentes.Sintoma", b =>
                {
                    b.Property<int>("SintomaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SintomaId"));

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HistorialMedicoId")
                        .HasColumnType("int");

                    b.HasKey("SintomaId");

                    b.HasIndex("HistorialMedicoId");

                    b.ToTable("Sintoma");
                });

            modelBuilder.Entity("Olimpiadas2023.Models.Componentes.Tratamiento", b =>
                {
                    b.Property<int>("TratamientoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TratamientoId"));

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HistorialMedicoId")
                        .HasColumnType("int");

                    b.HasKey("TratamientoId");

                    b.HasIndex("HistorialMedicoId");

                    b.ToTable("Tratamiento");
                });

            modelBuilder.Entity("Olimpiadas2023.Models.Habitacion", b =>
                {
                    b.Property<int>("HabitacionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HabitacionId"));

                    b.Property<int>("Capacidad")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EstadoHabitacion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("NumeroHabitacion")
                        .HasColumnType("int");

                    b.Property<string>("TipoHabitacion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("HabitacionId");

                    b.HasIndex("NumeroHabitacion");

                    b.ToTable("Habitaciones");
                });

            modelBuilder.Entity("Olimpiadas2023.Models.HistorialMedico", b =>
                {
                    b.Property<int>("HistorialMedicoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HistorialMedicoId"));

                    b.Property<string>("Diagnostico")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HistorialMedicoId");

                    b.ToTable("HistorialMedico");
                });

            modelBuilder.Entity("Olimpiadas2023.Models.Personales.Persona", b =>
                {
                    b.Property<int>("PersonaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonaId"));

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Documento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GrupoSanguineo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TipoPersona")
                        .HasColumnType("int");

                    b.HasKey("PersonaId");

                    b.ToTable("Personas");

                    b.HasDiscriminator<int>("TipoPersona");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Olimpiadas2023.Models.Personales.Empleado", b =>
                {
                    b.HasBaseType("Olimpiadas2023.Models.Personales.Persona");

                    b.Property<int>("EmpleadoId")
                        .HasColumnType("int");

                    b.Property<string>("Especializacion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Horarios")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Profesion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("TipoCargo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Olimpiadas2023.Models.Personales.Paciente", b =>
                {
                    b.HasBaseType("Olimpiadas2023.Models.Personales.Persona");

                    b.Property<DateTime>("FechaAlta")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaIngreso")
                        .HasColumnType("datetime2");

                    b.Property<int>("HistorialMedico")
                        .HasColumnType("int");

                    b.Property<int>("HistorialMedicoId")
                        .HasColumnType("int");

                    b.Property<int>("PacienteId")
                        .HasColumnType("int");

                    b.HasIndex("HistorialMedicoId")
                        .IsUnique()
                        .HasFilter("[HistorialMedicoId] IS NOT NULL");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("Olimpiadas2023.Models.Componentes.Alergia", b =>
                {
                    b.HasOne("Olimpiadas2023.Models.Personales.Paciente", "Paciente")
                        .WithMany("Alergias")
                        .HasForeignKey("PacientePersonaId");

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("Olimpiadas2023.Models.Componentes.Enfermedad", b =>
                {
                    b.HasOne("Olimpiadas2023.Models.Personales.Paciente", "Paciente")
                        .WithMany("Enfermedades")
                        .HasForeignKey("PacientePersonaId");

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("Olimpiadas2023.Models.Componentes.Medicamento", b =>
                {
                    b.HasOne("Olimpiadas2023.Models.Personales.Paciente", "Paciente")
                        .WithMany("Medicamentos")
                        .HasForeignKey("PacientePersonaId");

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("Olimpiadas2023.Models.Componentes.ResultadoExamen", b =>
                {
                    b.HasOne("Olimpiadas2023.Models.HistorialMedico", "HistorialMedico")
                        .WithMany("ResultadosExamenes")
                        .HasForeignKey("HistorialMedicoId");

                    b.Navigation("HistorialMedico");
                });

            modelBuilder.Entity("Olimpiadas2023.Models.Componentes.Sintoma", b =>
                {
                    b.HasOne("Olimpiadas2023.Models.HistorialMedico", "HistorialMedico")
                        .WithMany("Sintomas")
                        .HasForeignKey("HistorialMedicoId");

                    b.Navigation("HistorialMedico");
                });

            modelBuilder.Entity("Olimpiadas2023.Models.Componentes.Tratamiento", b =>
                {
                    b.HasOne("Olimpiadas2023.Models.HistorialMedico", "HistorialMedico")
                        .WithMany("Tratamientos")
                        .HasForeignKey("HistorialMedicoId");

                    b.Navigation("HistorialMedico");
                });

            modelBuilder.Entity("Olimpiadas2023.Models.Personales.Paciente", b =>
                {
                    b.HasOne("Olimpiadas2023.Models.HistorialMedico", "HistorialMedicos")
                        .WithOne("Paciente")
                        .HasForeignKey("Olimpiadas2023.Models.Personales.Paciente", "HistorialMedicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HistorialMedicos");
                });

            modelBuilder.Entity("Olimpiadas2023.Models.HistorialMedico", b =>
                {
                    b.Navigation("Paciente");

                    b.Navigation("ResultadosExamenes");

                    b.Navigation("Sintomas");

                    b.Navigation("Tratamientos");
                });

            modelBuilder.Entity("Olimpiadas2023.Models.Personales.Paciente", b =>
                {
                    b.Navigation("Alergias");

                    b.Navigation("Enfermedades");

                    b.Navigation("Medicamentos");
                });
#pragma warning restore 612, 618
        }
    }
}
